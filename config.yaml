# 1. software used for analyses - the current preset should be fine
# RAxML-NG and IQ-TREE2 paths should be fine, as they are part of RAxMLGroveScripts
# (optional) tqDist needs to be downloaded/installed and the path set
software:
  raxml_ng:
    command: "libs/RAxMLGroveScripts/tools/raxml-ng_v1.1.0_linux_x86_64/raxml-ng"         # path to executable. this should be already included in this repo
  iqtree2:
    command: "libs/RAxMLGroveScripts/tools/iqtree-2.2.0-beta-Linux/bin/iqtree2"           # path to executable. this should be already included in this repo
  tqdist:
    command: "all_pairs_quartet_dist"       # (optional) only needed if the rule is executed -> uncomment the respective line in "rule all" in the Snakemake file


# 2. define tools
# the base structure of the tool definition is the following:
# tool-name (which also will be used as prefix):
#   path:
#   command:			# string with command line parameters. PhyloSmew will use this string to insert known paths to the MSA, model, etc into {}.
#						# the base structure is based on RAxML-NG command line parameters. For more options, you can implement an InferenceClass
#						# (see inference_tools.py)
#         known variables are the following:
#             msa_path:  	path to MSA
#             threads:   	number of threads to use by the inference tool
#             prefix:		output file prefix
#             model:  		substitution model
#             
#   command_partitioned:			# same as command, but for partitioned MSAs (since some tools change the parameters or flags for that)
#   out_tree: 					# name of the tree produced by the inference tool. this will be collected by PhyloSmew and run through RAxML-NG --evaluate.
#   inference_class:				# in case the simple "command" string is not enough, you can implement your own tool class (see inference_tools.py)
#   reference:					# use this to a reference "tool-name". all set configs will be copied from "tool-name", then overwritten with current configs.
#   add_flags:					# attaches string to "command". useful together with the "reference" option.

tools:
  raxml1:         # this name shall be used as prefix. "_" will be replaced to "-"
    path: "libs/RAxMLGroveScripts/tools/raxml-ng_v1.1.0_linux_x86_64/raxml-ng"
    command: "{exe_path} --msa {msa_path} --model {model} --threads {threads} --prefix {prefix} --force perf_threads"
    out_tree: "{prefix}.raxml.bestTree"
    inference_class: "SimpleGeneric"                                                                                    # DEFAULT: if omitted, SimpleGeneric will be used
  iqtree2:
    path: "libs/RAxMLGroveScripts/tools/iqtree-2.2.0-beta-Linux/bin/iqtree2"
    command: "{exe_path} -s {msa_path} -m {model} -nt {threads} --prefix {prefix}"
    command_partitioned: "{exe_path} -s {msa_path} -m {model} -nt {threads} --prefix {prefix} -p {part_file_path}"      # if omitted, "command" will be used instead
    out_tree: "{prefix}.treefile"
  iqtree3:
    path: "../iqtree-3.0.1-Linux/bin/iqtree3"
    inference_class: "IQTREE2"              # We assume we can run IQ-TREE3 the same way as IQ-TREE2 back then
  iqtree3_fast:
    reference: "iqtree3"      # reference must come from the here defined "tools". it presets the values to the values of the reference
    inference_class: "IQTREE3_Fast"
  raxml2_default:
    reference: "raxml1"
    path: "../raxml-ng_v2.0/bin/raxml-ng"
  raxml2_fast:
    reference: "raxml2_default"
    add_flags: "--fast"       # concatenates "add_flags" to "command" and "command_partitioned" of the reference entry
  fasttree2:
    path: "../FastTree2/FastTreeDbl"
    inference_class: "FastTree2"                # here we use a fully custom InferenceTool class implementation
  veryfasttree:
    path: "../veryfasttree-4.0.5/build/VeryFastTree"
    inference_class: "VeryFastTree"             # here we use a fully custom InferenceTool class implementation


# 3. Select tools to run and evaluate in the pipeline, set number of threads
tool_list: ["raxml1", "iqtree2"]
num_threads: [1, 4]                               # This can be an integer or a list of integers

# 4. Set the "dataset selection criteria". This name will also be used as output directory name in ./out/
used_dsc: "smew_test"   # criteria to be used for the experiments. can be defined below



# Optional: New definitions of dataset configuration/selection criteria (dsc)
data_sets:
  sort_by:                        # attribute by which the datasets are sorted (no need to change, probably)
    RGS: "PATTERNS_BY_TAXA"
    TB: "PATTERNS_BY_TAXA"
    RGS_TB: "PATTERNS_BY_TAXA"

  # Example selection criteria:
  # test_name:      # (mandatory) name of the selection criteria
    # substitution_model:   # (mandatory) substitution model to use for tree inferences with this dataset. in case of
                            # partitioned datasets, this model would be used for every partition. DEFAULT: GTR+G
                            # Currently only one model can be specified here at a time, such that DNA and AA datasets
                            # cannot be run within the same dsc. You would need to define separate dsc.

                            # IMPORTANT: in case you're using RGS to simulate MSAs, RGS will use the model and inferred
                            #            model parameters stored in RAxMLGrove to simulate the MSAs calling AliSim.
                            #            Setting the substitution model here will NOT change this, such that the model
                            #            used for simulations might differ from the model used for inferences specified here.
                            #            If (for whatever reason) you need both models to correspond, you can try to
                            #            set the 'query' variable (see below) to filter by specific models.
                            #            (e.g., query: "MODEL = 'HKY' and ALPHA" would select datasets inferred under
                            #            the HKY+Gamma(+I) model). However, since ~90Â¼ of the datasets were inferred
                            #            under GTR+G(+I) model, to get a large variety of datasets we do not recommend
                            #            filtering by model.

    # custom_msas:          # (optional)  path to directory containing MSAs. PhyloSmew will copy those to ./out/
                            #             before analysis.

    # ------
    #     the following options are only relevant if automatic dataset selection/simulation should be used.
    # ------
    # source:       # where to get data from. possible inputs are:
                    #   RGS - RAxMLGrove simulated MSAs, without gap insertion by default
                    #   TB  - TreeBASE empirical MSAs
                    #   RGS-TB - simulated MSAs based on TreeBASE datasets
    # query:        # RGS database query (see https://github.com/angtft/RAxMLGroveScripts)
    # num_points:   # number of selected datasets from the RGS database
    # num_repeats:  # number of independent analyses per selected dataset (careful: makes only sense for simulated data,
                    #   since every run creates a different simulated MSA). default: 1
    # consel_rep:   # number of bootstrap replicates when using consel (makermt '-b' flag)
    # db:           # select the db for automatic dataset selection using RAxMLGroveScripts. some
                    # dbs should already be present in the RGS repository (https://github.com/angtft/RAxMLGroveScripts).
                    # these are: 'latest.db'/'latest_all.db', which store entries of RAxMLGrove datasets,
                    # and 'tb_all.db' which stores TreeBASE entries.

  # We used the following definitions for our own experiments at some point.
  smew_test:
    source: "TB"
    query: "DATA_TYPE = 'DNA' and NUM_TAXA < 100 and OVERALL_NUM_PATTERNS < 500"
    num_points: 10
  smew_test_simulated:
    source: "RGS"
    query: "DATA_TYPE = 'DNA' and NUM_TAXA < 100 and OVERALL_NUM_PATTERNS < 500"
    num_points: 5
    db: "latest.db"
  dsc6_0_7:
    source: "RGS"
    query: "NUM_TAXA < 470 and OVERALL_NUM_PATTERNS < 18764 and DATA_TYPE = 'DNA' and MODEL like 'GTR%' and OVERALL_NUM_ALIGNMENT_SITES > 0 and FREQ_A and RATE_AC"
    num_points: 20000
  tb_5000:
    source: "TB"
    query: "DATA_TYPE = 'DNA' and NUM_TAXA < 214 and OVERALL_NUM_PATTERNS < 3475"
    num_points: 5000
    num_repeats: 1
  tb_1000_unlim:
    source: "TB"
    query: "DATA_TYPE = 'DNA'"
    num_points: 1000
    num_repeats: 1
  rgs_tb_5000:
    source: "RGS_TB"
    query: "NUM_TAXA < 214 and OVERALL_NUM_PATTERNS < 3475 and DATA_TYPE = 'DNA' and MODEL like 'GTR%' and OVERALL_NUM_ALIGNMENT_SITES > 0 and FREQ_A and RATE_AC and OVERALL_NUM_PARTITIONS = 1"
    num_points: 5000
    num_repeats: 1
  dsc_aa_0_7:
    source: "RGS"
    query: "NUM_TAXA <= 798 and OVERALL_NUM_PATTERNS <= 5432 and DATA_TYPE = 'AA' and RATE_STR != 'None' and FREQ_STR != 'None' and MODEL not like 'AUTO%'"
    num_points: 1000
    num_repeats: 1
    substitution_model: "LG"
    db: "latest_all_0_7.db"
  tb_aa:
    source: "TB"
    query: "DATA_TYPE = 'AA' and NUM_TAXA < 214 and OVERALL_NUM_PATTERNS < 21926"
    num_points: 780
    num_repeats: 1
    substitution_model: "LG"
    db: "tb_all.db"
  rgs_tb_5000_bonk:
    source: "RGS"
    query: "DATA_TYPE = 'DNA' and NUM_TAXA < 214 and OVERALL_NUM_PATTERNS < 3475"
    num_points: 5000
    num_repeats: 1
    substitution_model: "GTR+G"
    db: "tb_all.db"
  custom_test: # custom MSA directory, without using RGS
    source: "RGS_TB"
    substitution_model: "GTR+G"
    custom_msas: "../custom_msas/structure_2"
